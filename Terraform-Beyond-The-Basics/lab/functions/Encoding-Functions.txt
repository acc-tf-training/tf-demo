###base64decode Function
#base64decode takes a string containing a Base64 character sequence and returns the original string.
> base64decode("SGVsbG8gV29ybGQ=")
Hello World

###base64encode Function
#base64encode applies Base64 encoding to a string.
> base64encode("Hello World")
SGVsbG8gV29ybGQ=

###base64gzip Function
#base64gzip compresses a string with gzip and then encodes the result in Base64 encoding.

###csvdecode Function
#csvdecode decodes a string containing CSV-formatted data and produces a list of maps representing that data.
> csvdecode("a,b,c\n1,2,3\n4,5,6")
[
  {
    "a" = "1"
    "b" = "2"
    "c" = "3"
  },
  {
    "a" = "4"
    "b" = "5"
    "c" = "6"
  }
]

###jsondecode Function
#jsondecode interprets a given string as JSON, returning a representation of the result of decoding that string.
> jsondecode("{\"hello\": \"world\"}")
{
  "hello" = "world"
}
> jsondecode("true")
true

###jsonencode Function
#jsonencode encodes a given value to a string using JSON syntax.
> jsonencode({"hello"="world"})
{"hello":"world"}

###textdecodebase64 Function
#textdecodebase64 function decodes a string that was previously Base64-encoded, and then interprets the result as characters in a specified character encoding.
> textdecodebase64("SABlAGwAbABvACAAVwBvAHIAbABkAA==", "UTF-16LE")
Hello World

###textencodebase64 Function
#textencodebase64 encodes the unicode characters in a given string using a specified character encoding, returning the result base64 encoded because Terraform language strings are always sequences of unicode characters.
substr(string, encoding_name)
Examples
> textencodebase64("Hello World", "UTF-16LE")
SABlAGwAbABvACAAVwBvAHIAbABkAA==

###urlencode Function
#urlencode applies URL encoding to a given string
> urlencode("Hello World")
Hello%20World
> urlencode("â˜ƒ")
%E2%98%83
> "http://example.com/search?q=${urlencode("terraform urlencode")}"
http://example.com/search?q=terraform%20urlencode

###yamldecode Function
#yamldecode parses a string as a subset of YAML, and produces a representation of its value.
> yamldecode("{\"hello\": \"world\"}")
{
  "hello" = "world"
}

> yamldecode("true")
true

> yamldecode("{a: &foo [1, 2, 3], b: *foo}")
{
  "a" = [
    1,
    2,
    3,
  ]
  "b" = [
    1,
    2,
    3,
  ]
}

> yamldecode("{a: &foo [1, *foo, 3]}")

Error: Error in function call

Call to function "yamldecode" failed: cannot refer to anchor "foo" from inside
its own definition.

> yamldecode("{a: !not-supported foo}")

Error: Error in function call

Call to function "yamldecode" failed: unsupported tag "!not-supported".

###yamlencode Function
#yamlencode encodes a given value to a string using YAML 1.2 block syntax.
> yamlencode({"a":"b", "c":"d"})
"a": "b"
"c": "d"

> yamlencode({"foo":[1, 2, 3], "bar": "baz"})
"bar": "baz"
"foo":
- 1
- 2
- 3

> yamlencode({"foo":[1, {"a":"b","c":"d"}, 3], "bar": "baz"})
"bar": "baz"
"foo":
- 1
- "a": "b"
  "c": "d"
- 3


###alltrue Function
#alltrue returns true if all elements in a given collection are true or "true". It also returns true if the collection is empty.
alltrue(list)
Examples
> alltrue(["true", true])
true
> alltrue([true, false])
false

###anytrue Function
#anytrue returns true if any element in a given collection is true or "true". It also returns false if the collection is empty.
anytrue(list)
Examples
> anytrue(["true"])
true
> anytrue([true])
true
> anytrue([true, false])
true
> anytrue([])
false

###chunklist Function
#chunklist splits a single list into fixed-size chunks, returning a list of lists.
chunklist(list, chunk_size)
Examples
> chunklist(["a", "b", "c", "d", "e"], 2)
[
  [
    "a",
    "b",
  ],
  [
    "c",
    "d",
  ],
  [
    "e",
  ],
]
> chunklist(["a", "b", "c", "d", "e"], 1)
[
  [
    "a",
  ],
  [
    "b",
  ],
  [
    "c",
  ],
  [
    "d",
  ],
  [
    "e",
  ],
]

###coalesce Function
#coalesce takes any number of arguments and returns the first one that isn't null or an empty string.
> coalesce("a", "b")
a
> coalesce("", "b")
b
> coalesce(1,2)
1

###coalescelist Function
#coalescelist takes any number of list arguments and returns the first one that isn't empty.
> coalescelist(["a", "b"], ["c", "d"])
[
  "a",
  "b",
]
> coalescelist([], ["c", "d"])
[
  "c",
  "d",
]
#To perform the coalescelist operation with a list of lists, use the ... symbol to expand the outer list as arguments
> coalescelist([[], ["c", "d"]]...)
[
  "c",
  "d",
]

###compact Function
#compact takes a list of strings and returns a new list with any empty string elements removed.
> compact(["a", "", "b", "c"])
[
  "a",
  "b",
  "c",
]

###concat Function
#concat takes two or more lists and combines them into a single list
> concat(["a", ""], ["b", "c"])
[
  "a",
  "",
  "b",
  "c",
]

###contains Function
#contains determines whether a given list or set contains a given single value as one of its elements.
contains(list, value)
Examples
> contains(["a", "b", "c"], "a")
true
> contains(["a", "b", "c"], "d")
false

###distinct Function
#distinct takes a list and returns a new list with any duplicate elements removed.
> distinct(["a", "b", "a", "c", "d", "b"])
[
  "a",
  "b",
  "c",
  "d",
]

###element Function
#element retrieves a single element from a list.
element(list, index)
Examples
> element(["a", "b", "c"], 1)
b
#If the given index is greater than the length of the list then the index is "wrapped around" by taking the index modulo the length of the list
> element(["a", "b", "c"], 3)
a
#To get the last element from the list use length to find the size of the list (minus 1 as the list is zero-based) and then pick the last element
> element(["a", "b", "c"], length(["a", "b", "c"])-1)
c

###flatten Function
#flatten takes a list and replaces any elements that are lists with a flattened sequence of the list contents.
Examples
> flatten([["a", "b"], [], ["c"]])
["a", "b", "c"]
#If any of the nested lists also contain directly-nested lists, these too are flattened recursively
> flatten([[["a", "b"], []], ["c"]])
["a", "b", "c"]

###index Function
#index finds the element index for a given value in a list.
index(list, value)
Examples
> index(["a", "b", "c"], "b")
1

###keys Function
#keys takes a map and returns a list containing the keys from that map.
> keys({a=1, c=2, d=3})
[
  "a",
  "c",
  "d",
]

###length Function
#length determines the length of a given list, map, or string.
> length([])
0
> length(["a", "b"])
2
> length({"a" = "b"})
1
> length("hello")
5

###list Function
#The list function is no longer available. Prior to Terraform v0.12 it was the only available syntax for writing a literal list inside an expression, but Terraform v0.12 introduced a new first-class syntax.
#To update an expression like list(a, b, c), write the following instead:
tolist([a, b, c])

###lookup Function
#lookup retrieves the value of a single element from a map, given its key. If the given key does not exist, the given default value is returned instead.
lookup(map, key, default)
Examples
> lookup({a="ay", b="bee"}, "a", "what?")
ay
> lookup({a="ay", b="bee"}, "c", "what?")
what?

###map Function
#The map function is no longer available. Prior to Terraform v0.12 it was the only available syntax for writing a literal map inside an expression, but Terraform v0.12 introduced a new first-class syntax.
#To update an expression like map("a", "b", "c", "d"), write the following instead:
tomap({
  a = "b"
  c = "d"
})

###matchkeys Function
#matchkeys constructs a new list by taking a subset of elements from one list whose indexes match the corresponding indexes of values in another list.
matchkeys(valueslist, keyslist, searchset)
Examples
> matchkeys(["i-123", "i-abc", "i-def"], ["us-west", "us-east", "us-east"], ["us-east"])
[
  "i-abc",
  "i-def",
]
#If the result ordering is not significant, you can achieve a similar result using a for expression with a map:
> [for i, z in {"i-123"="us-west","i-abc"="us-east","i-def"="us-east"}: i if z == "us-east"]
[
  "i-def",
  "i-abc",
]
#If the keys and values of interest are attributes of objects in a list of objects then you can also achieve a similar result using a for expression with that list:
> [for x in [{id="i-123",zone="us-west"},{id="i-abc",zone="us-east"}]: x.id if x.zone == "us-east"]
[
  "i-abc",
]
#to filter the instances by matching one of the resource attributes
> [for x in aws_instance.example: x.id if x.availability_zone == "us-east-1a"]
[
  "i-abc123",
  "i-def456",
]

###merge Function
#merge takes an arbitrary number of maps or objects, and returns a single map or object that contains a merged set of elements from all arguments.
Examples
> merge({a="b", c="d"}, {e="f", c="z"})
{
  "a" = "b"
  "c" = "z"
  "e" = "f"
}
> merge({a="b"}, {a=[1,2], c="z"}, {d=3})
{
  "a" = [
    1,
    2,
  ]
  "c" = "z"
  "d" = 3
}

###range Function
#range generates a list of numbers using a start value, a limit value, and a step value.
range(max)
range(start, limit)
range(start, limit, step)
Examples
> range(3)
[
  0,
  1,
  2,
]

> range(1, 4)
[
  1,
  2,
  3,
]

> range(1, 8, 2)
[
  1,
  3,
  5,
  7,
]

> range(1, 4, 0.5)
[
  1,
  1.5,
  2,
  2.5,
  3,
  3.5,
]

> range(4, 1)
[
  4,
  3,
  2,
]

> range(10, 5, -2)
[
  10,
  8,
  6,
]

###reverse Function
#reverse takes a sequence and produces a new sequence of the same length with all of the same elements as the given sequence but in reverse order.
> reverse([1, 2, 3])
[
  3,
  2,
  1,
]

###setintersection Function
#The setintersection function takes multiple sets and produces a single set containing only the elements that all of the given sets have in common
setintersection(sets...)
Examples
> setintersection(["a", "b"], ["b", "c"], ["b", "d"])
[
  "b",
]

###setproduct Function
#The setproduct function finds all of the possible combinations of elements from all of the given sets by computing the Cartesian product.
setproduct(sets...)
Examples
#If any of the arguments is empty then the result is always empty itself, similar to how multiplying any number by zero gives zero 
> setproduct(["development", "staging", "production"], [])
[]
# if all of the arguments have only one element then the result has only one element, which is the first element of each argument:
> setproduct(["a"], ["b"])
[
  [
    "a",
    "b",
  ],
]
#mixing both strings and numbers results in the numbers being converted to strings so that the result elements all have a consistent type:
> setproduct(["staging", "production"], ["a", 2])
[
  [
    "staging",
    "a",
  ],
  [
    "staging",
    "2",
  ],
  [
    "production",
    "a",
  ],
  [
    "production",
    "2",
  ],
]

###setsubtract Function
#The setsubtract function returns a new set containing the elements from the first set that are not present in the second set.
setsubtract(a, b)
Examples
> setsubtract(["a", "b", "c"], ["a", "c"])
[
  "b",
]

###setunion Function
#The setunion function takes multiple sets and produces a single set containing the elements from all of the given sets. In other words, it computes the union of the sets.
setunion(sets...)
Examples
> setunion(["a", "b"], ["b", "c"], ["d"])
[
  "d",
  "b",
  "c",
  "a",
]

###slice Function
#slice extracts some consecutive elements from within a list.
slice(list, startindex, endindex)
Examples
> slice(["a", "b", "c", "d"], 1, 3)
[
  "b",
  "c",
]

###sort Function
#sort takes a list of strings and returns a new list with those strings sorted lexicographically.
> sort(["e", "d", "a", "x"])
[
  "a",
  "d",
  "e",
  "x",
]

###sum Function
#sum takes a list or set of numbers and returns the sum of those numbers.
> sum([10, 13, 6, 4.5])
33.5

###transpose Function
#transpose takes a map of lists of strings and swaps the keys and values to produce a new map of lists of strings
> transpose({"a" = ["1", "2"], "b" = ["2", "3"]})
{
  "1" = [
    "a",
  ],
  "2" = [
    "a",
    "b",
  ],
  "3" = [
    "b",
  ],
}

###values Function
#values takes a map and returns a list containing the values of the elements in that map.
> values({a=3, c=2, d=1})
[
  3,
  2,
  1,
]

###zipmap Function
#zipmap constructs a map from a list of keys and a corresponding list of values.
zipmap(keyslist, valueslist)
Examples
> zipmap(["a", "b"], [1, 2])
{
  "a" = 1,
  "b" = 2,
}
